#!/usr/bin/env bash

# Ensure script works on both Unix and Windows
export MSYS=winsymlinks:nativestrict
export MSYS2=winsymlinks:nativestrict

# Get the commit message from the commit being created
COMMIT_MSG=$(cat "$1")

# Get the current version from build.gradle.kts
CURRENT_VERSION=$(grep 'version = ' build.gradle.kts | sed 's/.*version = "\(.*\)".*/\1/')

# Remove -SNAPSHOT if present
VERSION_BASE=${CURRENT_VERSION%-SNAPSHOT}

# Split version into components
IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_BASE"

# Determine version bump type based on commit message
if [[ $COMMIT_MSG == *"BREAKING CHANGE"* ]] || [[ $COMMIT_MSG == *"!:"* ]]; then
    # Major version bump
    MAJOR=$((MAJOR + 1))
    MINOR=0
    PATCH=0
    echo "BREAKING CHANGE detected - Bumping major version"
elif [[ $COMMIT_MSG =~ ^feat: ]]; then
    # Minor version bump
    MINOR=$((MINOR + 1))
    PATCH=0
    echo "Feature detected - Bumping minor version"
elif [[ $COMMIT_MSG =~ ^(fix|docs|style|refactor|perf|test|chore): ]]; then
    # Patch version bump
    PATCH=$((PATCH + 1))
    echo "Fix/maintenance detected - Bumping patch version"
else
    # Default to patch bump if no conventional commit prefix is found
    PATCH=$((PATCH + 1))
    echo "No conventional commit prefix found - Defaulting to patch bump"
fi

# Construct new version
NEW_VERSION="$MAJOR.$MINOR.$PATCH-SNAPSHOT"

# Update build.gradle.kts with new version (using platform-independent sed)
if [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
    # Windows-specific sed command
    sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" build.gradle.kts
else
    # Unix-like systems
    sed -i "" "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" build.gradle.kts
fi

# Add the modified build.gradle.kts to the commit
git add build.gradle.kts

# Print the version change with type
echo "Bumped version from $CURRENT_VERSION to $NEW_VERSION"